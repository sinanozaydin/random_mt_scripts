#!/usr/bin/env python

import numpy as np
import csv
import os,sys
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata
from matplotlib import cm
import matplotlib.colors as colorz
#import scipy.interpolate as interp

class MT_Res_plot(object):

	def __init__(self):

		self.dat_list = [os.path.join(os.getcwd(),dat) for dat in os.listdir(os.getcwd()) if dat.find('.dat')>0]
		self.dat_list.sort()
		print str(len(self.dat_list)) + ' number of dat files are found:'
		for i in self.dat_list:
			print i

		self.mu = 4 * np.pi * 10**(-1)  #CGS


		print 'What will be the upper limit of the colorbar?'
		self.cb_limit = raw_input()

	def read_dats(self):

		self.periodlist_model = []
		self.freqlist_model = []
		self.rhoxxlist_global_model = []
		self.rhoxylist_global_model = []
		self.rhoyxlist_global_model = []
		self.rhoyylist_global_model = []
		self.phasexxlist_global_model = []
		self.phasexylist_global_model = []
		self.phaseyxlist_global_model = []
		self.phaseyylist_global_model = []
		self.rhoxxerrlist_global_model = []
		self.rhoxyerrlist_global_model = []
		self.rhoyxerrlist_global_model = []
		self.rhoyyerrlist_global_model = []
		self.phasexxerrlist_global_model = []
		self.phasexyerrlist_global_model = []
		self.phaseyxerrlist_global_model = []
		self.phaseyyerrlist_global_model = []

		self.zxx_list_model = []
		self.zxy_list_model = []
		self.zyx_list_model = []
		self.zyy_list_model = []

		self.zxxerr_list_model = []
		self.zxyerr_list_model = []
		self.zyxerr_list_model = []
		self.zyyerr_list_model = []

		for dat_num in range(0,len(self.dat_list)):

			fileobj = open(self.dat_list[dat_num],'rb')
			filecsv = csv.reader(fileobj,delimiter = ' ')
			data = []
			for row in filecsv:
				data.append(row)
			self.lendata = len(data)
			for row in range(0,self.lendata):
				data[row] = filter(None,data[row])

			dash_found = False

			for row in range(8,len(data)):
			    if data[row][0] == '#' :
			        limitlines = row-1
			        dash_found = True

			if dash_found == False:
				limitlines = len(data)

			self.station_names = []
			self.frequencies = []
			self.lat_degrees_list = []
			self.lon_degrees_list = []
			station_change_row = []
			for row in range(8,limitlines):
				if data[row][1] != data[row-1][1] :
					station_name = data[row][1]
					self.station_names.append(station_name)
					self.lat_degrees_list.append(float(data[row][2]))
					self.lon_degrees_list.append(float(data[row][3]))
					change = row
					station_change_row.append(change)
					self.lenst = len(station_change_row)
			station_change_row.append(limitlines)

			self.periodlist = []
			self.freqlist = []
			self.zxx_list = []
			self.zxy_list = []
			self.zyx_list = []
			self.zyy_list = []
			self.zxxerr_list = []
			self.zxyerr_list = []
			self.zyxerr_list = []
			self.zyyerr_list = []

			for i in range(0,self.lenst):
				self.station_periodlist = []
				self.station_freqlist = []
				self.station_zxxlist = []
				self.station_zxylist = []
				self.station_zyxlist = []
				self.station_zyylist = []
				self.station_zxxerrlist = []
				self.station_zxyerrlist = []
				self.station_zyxerrlist = []
				self.station_zyyerrlist = []

				for row in range(station_change_row[i],station_change_row[i+1]):
					if (row-8)%4 == 0:
						period = float(data[row][0])
						#print period
						#print str(i) + '    iter no'
						freq = (2 * np.pi) / (period)
						self.station_periodlist.append(period)
						self.station_freqlist.append(freq)
					elif data[row][7] == 'ZYX':
						zxx_station = float(data[row-2][8]) + 1j*(float(data[row-2][9]))
						zxxerr_station = float(data[row-2][10])
						self.station_zxxlist.append(zxx_station)
						self.station_zxxerrlist.append(zxxerr_station)
						zxy_station = float(data[row-1][8]) + 1j*(float(data[row-1][9]))
						zxyerr_station = float(data[row-1][10])
						self.station_zxyerrlist.append(zxyerr_station)
						self.station_zxylist.append(zxy_station)
						zyx_station = float(data[row][8]) + 1j*(float(data[row][9]))
						zyxerr_station = float(data[row][10])
						self.station_zyxlist.append(zyx_station)
						self.station_zyxerrlist.append(zyxerr_station)
						zyy_station = float(data[row+1][8]) + 1j*(float(data[row+1][9]))
						zyyerr_station = float(data[row+1][10])
						self.station_zyylist.append(zyy_station)
						self.station_zyyerrlist.append(zyyerr_station)
				if dat_num > 0:
					points = zip(self.station_periodlist,self.station_zxxlist, self.station_zxxerrlist,
					self.station_zxylist, self.station_zxyerrlist,
					self.station_zyxlist, self.station_zyxerrlist,
					self.station_zyylist, self.station_zyyerrlist)
					points = sorted(points, reverse = True)

					self.station_periodlist = [point[0] for point in points]
					self.station_zxxlist = [point[1] for point in points]
					self.station_zxxerrlist = [point[2] for point in points]
					self.station_zxylist = [point[3] for point in points]
					self.station_zxyerrlist = [point[4] for point in points]
					self.station_zyxlist = [point[5] for point in points]
					self.station_zyxerrlist = [point[6] for point in points]
					self.station_zyylist = [point[7] for point in points]
					self.station_zyyerrlist = [point[8] for point in points]

				self.zxx_list.append(self.station_zxxlist)
				self.zxy_list.append(self.station_zxylist)
				self.zyx_list.append(self.station_zyxlist)
				self.zyy_list.append(self.station_zyylist)
				self.zxxerr_list.append(self.station_zxxerrlist)
				self.zxyerr_list.append(self.station_zxyerrlist)
				self.zyxerr_list.append(self.station_zyxerrlist)
				self.zyyerr_list.append(self.station_zyyerrlist)

				self.periodlist.append(self.station_periodlist)
				self.freqlist.append(1.0 / np.asarray(self.station_periodlist))
				#print station_change_row[i],i

			self.zxx_list_model.append(self.zxx_list)
			self.zxy_list_model.append(self.zxy_list)
			self.zyx_list_model.append(self.zyx_list)
			self.zyy_list_model.append(self.zyy_list)
			self.periodlist_model.append(self.periodlist)
			self.zxxerr_list_model.append(self.zxxerr_list)
			self.zxyerr_list_model.append(self.zxyerr_list)
			self.zyxerr_list_model.append(self.zyxerr_list)
			self.zyyerr_list_model.append(self.zyyerr_list)

		self.station_num = len(self.lat_degrees_list)

	def calculate_RMS_2(self):

		self.num_freq_list = [len(self.periodlist_model[0][k]) for k in range(0,len(self.periodlist_model[0]))]
		"""
		self.max_lis_xy = np.amax(np.abs(np.asarray(self.zxy_list_model[0])))
		self.min_lis_xy = np.amin(np.abs(np.asarray(self.zxy_list_model[0])))
		self.max_lis_yx = np.amax(np.abs(np.asarray(self.zyx_list_model[0])))
		self.min_lis_yx = np.amin(np.abs(np.asarray(self.zyx_list_model[0])))
		self.max_lis_xx = np.amax(np.abs(np.asarray(self.zxx_list_model[0])))
		self.min_lis_xx = np.amin(np.abs(np.asarray(self.zxx_list_model[0])))
		self.max_lis_yy = np.amax(np.abs(np.asarray(self.zyy_list_model[0])))
		self.min_lis_yy = np.amin(np.abs(np.asarray(self.zyy_list_model[0])))
		"""

		self.zxy_list_model = np.asarray(self.zxy_list_model)
		self.zyx_list_model = np.asarray(self.zyx_list_model)
		self.zxx_list_model = np.asarray(self.zxx_list_model)
		self.zyy_list_model = np.asarray(self.zyy_list_model)
		self.zxyerr_list_model = np.asarray(self.zxyerr_list_model)
		self.zyxerr_list_model = np.asarray(self.zyxerr_list_model)
		self.zxxerr_list_model = np.asarray(self.zxxerr_list_model)
		self.zyyerr_list_model = np.asarray(self.zyyerr_list_model)

		self.zxy_misfit_list = []
		self.zyx_misfit_list = []
		self.zxx_misfit_list = []
		self.zyy_misfit_list = []
		self.rms_xy_list = []
		self.rms_yx_list = []
		self.rms_xx_list = []
		self.rms_yy_list = []

		self.rms_xy_list_2 = []
		self.rms_yx_list_2 = []
		self.rms_xx_list_2 = []
		self.rms_yy_list_2 = []
		self.zxy_misfit_list_2 = []
		self.zyx_misfit_list_2 = []
		self.zxx_misfit_list_2 = []
		self.zyy_misfit_list_2 = []

		for i in range(0,self.station_num):
			for j in range(0,self.num_freq_list[i]):
				zxy_misfit = (np.asarray(self.zxy_list_model[1][i]) - np.asarray(self.zxy_list_model[0][i])) / np.asarray(self.zxyerr_list_model[0][i])
				zyx_misfit = (np.asarray(self.zyx_list_model[1][i]) - np.asarray(self.zyx_list_model[0][i])) / np.asarray(self.zyxerr_list_model[0][i])
				zxx_misfit = (np.asarray(self.zxx_list_model[1][i]) - np.asarray(self.zxx_list_model[0][i])) / np.asarray(self.zxxerr_list_model[0][i])
				zyy_misfit = (np.asarray(self.zyy_list_model[1][i]) - np.asarray(self.zyy_list_model[0][i])) / np.asarray(self.zyyerr_list_model[0][i])

			zxy_misfit_2 = np.sqrt((1.0 / float(self.num_freq_list[i])) * np.sum((np.abs(np.asarray(self.zxy_list_model[1][i])) - np.abs(np.asarray(self.zxy_list_model[0][i])))**2.0 / np.asarray(self.zxyerr_list_model[0][i])**2.0))
			zyx_misfit_2 = np.sqrt((1.0 / float(self.num_freq_list[i])) * np.sum((np.abs(np.asarray(self.zyx_list_model[1][i])) - np.abs(np.asarray(self.zyx_list_model[0][i])))**2.0 / np.asarray(self.zyxerr_list_model[0][i])**2.0))
			zxx_misfit_2 = np.sqrt((1.0 / float(self.num_freq_list[i])) * np.sum((np.abs(np.asarray(self.zxx_list_model[1][i])) - np.abs(np.asarray(self.zxx_list_model[0][i])))**2.0 / np.asarray(self.zxxerr_list_model[0][i])**2.0))
			zyy_misfit_2 = np.sqrt((1.0 / float(self.num_freq_list[i])) * np.sum((np.abs(np.asarray(self.zyy_list_model[1][i])) - np.abs(np.asarray(self.zyy_list_model[0][i])))**2.0 / np.asarray(self.zyyerr_list_model[0][i])**2.0))


			"""
			rmsxy = zxy_misfit.std()
			rmsyx = zyx_misfit.std()
			rmsxx = zxx_misfit.std()
			rmsyy = zyy_misfit.std()
			"""


			self.zxy_misfit_list.append(zxy_misfit)
			self.zyx_misfit_list.append(zyx_misfit)
			self.zxx_misfit_list.append(zxx_misfit)
			self.zyy_misfit_list.append(zyy_misfit)
			self.rms_xy_list.append(zxy_misfit_2)
			self.rms_yx_list.append(zyx_misfit_2)
			self.rms_xx_list.append(zxx_misfit_2)
			self.rms_yy_list.append(zyy_misfit_2)
		print np.mean(self.rms_xy_list)
		print np.mean(self.rms_yx_list)
		print np.mean(self.rms_xx_list)
		print np.mean(self.rms_yy_list)


	def plot_maps(self):

		cblimit = float(self.cb_limit)
		cmap_string = 'coolwarm'
		self.x_min = min(self.lon_degrees_list)
		self.x_max = max(self.lon_degrees_list)
		self.y_min = min(self.lat_degrees_list)
		self.y_max = max(self.lat_degrees_list)

		fig = plt.figure(figsize = (15,10))
		ax1 = plt.subplot2grid((16,17),(0,0), rowspan = 7,colspan = 8)
		ax2 = plt.subplot2grid((16,17),(0,9), rowspan = 7,colspan = 8)
		ax3 = plt.subplot2grid((16,17),(9,0), rowspan = 7,colspan = 8)
		ax4 = plt.subplot2grid((16,17),(9,9), rowspan = 7,colspan = 8)


		cax_xx = ax1.scatter(self.lon_degrees_list,self.lat_degrees_list, c = self.rms_xx_list, cmap = cmap_string, marker = 's',
		 linewidth = 0.5, edgecolor = 'k')
		cax_xx.set_clim(1,cblimit)
		ax1.set_xlim(self.x_min - 0.25,self.x_max + 0.25)
		cbar_xx = fig.colorbar(cax_xx,boundaries=np.linspace(1, cblimit),orientation="vertical", pad=0.05,
		 ticks = [1,(cblimit+1)/2.0,cblimit], ax = ax1)
		cax_xy = ax2.scatter(self.lon_degrees_list,self.lat_degrees_list, c = self.rms_xy_list, cmap = cmap_string, marker = 's',
		 linewidth = 0.5, edgecolor = 'k')
		ax2.set_xlim(self.x_min - 0.25,self.x_max + 0.25)
		cax_xy.set_clim(1, cblimit)
		cbar_xy = fig.colorbar(cax_xy,boundaries=np.linspace(1, cblimit),orientation="vertical", pad=0.05,
		 ticks = [1,(cblimit+1)/2.0, cblimit], ax = ax2)

		cax_yx = ax3.scatter(self.lon_degrees_list,self.lat_degrees_list, c = self.rms_yx_list, cmap = cmap_string, marker = 's',
		 linewidth = 0.5, edgecolor = 'k')
		ax3.set_xlim(self.x_min - 0.25,self.x_max + 0.25)
		cax_yx.set_clim(1, cblimit)
		cbar_yx = fig.colorbar(cax_yx,boundaries=np.linspace(1, cblimit),orientation="vertical", pad=0.05,
		 ticks = [1, (cblimit+1)/2.0, cblimit], ax = ax3)
		cax_yy = ax4.scatter(self.lon_degrees_list,self.lat_degrees_list, c = self.rms_yy_list, cmap = cmap_string, marker = 's',
		 linewidth = 0.5, edgecolor = 'k')
		ax4.set_xlim(self.x_min - 0.25,self.x_max + 0.25)
		cax_yy.set_clim(1,cblimit)
		cbar_yy = fig.colorbar(cax_yy,boundaries=np.linspace(1, cblimit),orientation="vertical", pad=0.05,
		 ticks = [1,(cblimit+1)/2.0, cblimit], ax = ax4)
		cbar_xy.set_label('RMS')
		cbar_yx.set_label('RMS')
		cbar_xx.set_label('RMS')
		cbar_yy.set_label('RMS')
		ax1.set_title('XX')
		ax2.set_title('XY')
		ax3.set_title('YX')
		ax4.set_title('YY')
		ax1.set_xlabel(r'$Longitude \, ({}^{\circ})$')
		ax1.set_ylabel(r'$Latitude \, ({}^{\circ})$')
		ax2.set_xlabel(r'$Longitude \, ({}^{\circ})$')
		ax2.set_ylabel(r'$Latitude \, ({}^{\circ})$')
		ax3.set_xlabel(r'$Longitude \, ({}^{\circ})$')
		ax3.set_ylabel(r'$Latitude \, ({}^{\circ})$')
		ax4.set_xlabel(r'$Longitude \, ({}^{\circ})$')
		ax4.set_ylabel(r'$Latitude \, ({}^{\circ})$')

		#plt.show()
		plt.savefig('RMS_MAP.png',dpi = 300)


####SCRIPT####
aaa = MT_Res_plot()
aaa.read_dats()
aaa.calculate_RMS_2()
aaa.plot_maps()
####END OF CODE####
